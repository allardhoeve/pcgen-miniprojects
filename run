#!/usr/bin/env python
from operator import attrgetter
from fuzzywuzzy import process

# Flush stdout
import sys
import os
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

from pcgen import find_all_pathfinder_spells
from pcgen.qa import QASpellSourceWeb
from prd import get_prd_spell_links

spells = find_all_pathfinder_spells()

with open("testdata/spells.html") as fh:
    html = fh.read()
    prdspells = get_prd_spell_links(html)

print("Found total of %d spells in Pathfinder LST sources" % len(spells))
print("Found total of %d spells in Pathfinder SRD" % len(prdspells))

qs = QASpellSourceWeb()
result = qs.test(spells)

print("Found total of %d spells in Pathfinder with errors" % len(result))


# re-order spells by sourcelong
by_source = {}

for (spell, error) in result:
    if spell.sourcelong not in by_source:
        by_source[spell.sourcelong] = {}

    by_source[spell.sourcelong][spell] = error


for source in sorted(by_source.iterkeys()):
    print
    print
    print source
    print "=" * len(source or "None")
    print

    for spell in sorted(by_source[source].iterkeys(), key=attrgetter('name')):
        # correct the spell
        result = qs.correct(spell, prdspells)

        if not result:
            print " 1. _%s has no valid source URL and cannot be auto-corrected_"
            continue

        print " 1. [%(spell)s](%(link)s) can be auto-corrected to '%(match)s' using '%(method)s'" % {
            "spell": spell.name,
            "link": spell.sourceweb,
            "match": result["match"],
            "method": "fuzzy %d%%" % result["certainty"] if result["method"] == "fuzzy" else result["method"],
            "prob": result["certainty"]
        }

print
print

