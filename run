#!/usr/bin/env python
from operator import attrgetter

# Flush stdout
import sys
import os
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

from pcgen import find_all_pathfinder_spells
from pcgen.qa import QASpellSourceWeb
from prd import get_prd_spell_links

spells = find_all_pathfinder_spells()

with open("testdata/spells.html") as fh:
    html = fh.read()
    prdspells = get_prd_spell_links(html)

print("# Pathfinder Spell QA")
print
print("Found total of %d spells in Pathfinder LST sources" % len(spells))
print("Found total of %d spells in Pathfinder SRD" % len(prdspells))

qs = QASpellSourceWeb()

# re-order spells by sourcelong
by_source = {}

for spell in spells:
    if spell.sourcelong not in by_source:
        by_source[spell.sourcelong] = []

    by_source[spell.sourcelong].append(spell)


for source in sorted(by_source.iterkeys()):
    print
    print
    print "## %s" % source
    print

    allvalid = True

    for spell in sorted(by_source[source], key=attrgetter('name')):

        # Test the SOURCEWEB
        if qs.testlink(spell) is False:  # correct link
            continue

        allvalid = False

        # correct the spell
        result = qs.correct(spell, prdspells)

        output = None

        if not result:
            print " 1. **%s has no valid source URL and cannot be auto-corrected**" % spell.name
            continue
        elif result["method"] == "exact":
            output = " 1. [%(spell)s](%(link)s) can be auto-corrected"
        else:
            output = " 1. [%(spell)s](%(link)s) can be auto-corrected by " \
                     "fuzzy-matching '%(match)s' (%(certainty)d/100)"

        print output % {
            "spell": spell.name,
            "link": spell.sourceweb,
            "match": result["match"],
            "method": result["method"],
            "certainty": result["certainty"]
        }

    if allvalid:
        print "All %d spells have valid SRD links" % len(by_source[source])

print
print
