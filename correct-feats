#!/usr/bin/env python

# Flush stdout
import sys
import os
import json
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

from pcgen import PathfinderCampaign
from pcgen.parser import describes_valid_lst_object, FeatObject
from pcgen.qa import QASourceLink
from prd import get_prd_feat_links

print "# Pathfinder PRD SOURCELINK Cleanup Run"
print


###
# Configure objects
###

qa = QASourceLink()
campaign = PathfinderCampaign()
lstfiles = campaign.find_feat_listfiles()

###
# Get PRD feats
###

with open("testdata/pathfinder/feats.html") as fh:
    html = fh.read()
    prdfeats = get_prd_feat_links(html)


###
# Store fuzzer matches and misses
###

try:
    with open("suggestions") as fh:
        suggestions = json.loads(fh.read())
except IOError:
    suggestions = { "matcher": {}, "links": {} }
except ValueError as e:
    print
    print "COULD NOT PARSE SUGGESTIONS FILE!"
    print
    print e
    print
    sys.exit(1)

misses = []

###
# correct each file
###
for (lstfile, sourcedef) in lstfiles:
    print
    print "## Opening %s" % sourcedef["sourcelong"]
    print
    print lstfile
    print

    # read original data
    lstfh = open(lstfile)
    data = lstfh.read()
    lines = data.split("\n")
    lstfh.close()

    # write new data
    with open(lstfile, 'w') as writelstfh:
        for line in lines:

            if describes_valid_lst_object(line):
                feat = FeatObject(line, sourcedef)

                if qa.testlink(feat):  # test to see if correction is needed
                    print " - Fixing %s" % feat.name
                    result = qa.correct(feat, prdfeats, suggestions=suggestions)

                    if result:
                        if result["method"] == "fuzzy":
                            print "   - fuzzy match [%s](%s)" % (result["match"], feat.sourcelink)
                            suggestions["matcher"][feat.name] = result["match"]
                    else:
                        print "   - cannot find a match in PRD index"
                        misses.append(feat.name)

                writelstfh.write(feat.lstline + "\n")

            else:
                writelstfh.write(line + "\n")

with open("suggestions.new", "w") as fh:
    fh.write(json.dumps(suggestions, sort_keys=True, indent=4, separators=(',', ': ')))

with open("misses", "w") as fh:
    fh.write("\n".join(misses))
